{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport default function useLocalStorage(storageKey, defaultValue) {\n  _s();\n\n  let [state, setState] = useState(\"\");\n  let [hasCheckedStorage, setCheckedStorage] = useState(false);\n  useEffect(() => {\n    let storedItem = localStorage.getItem(storageKey);\n    setState(storedItem || defaultValue);\n    setCheckedStorage(true);\n  }, [storageKey]);\n\n  function changeState(value) {\n    if (value === null) {\n      localStorage.removeItem(storageKey);\n    } else {\n      localStorage.setItem(storageKey, value);\n    }\n\n    setState(value);\n  }\n\n  return [state, changeState, hasCheckedStorage];\n}\n\n_s(useLocalStorage, \"rc/IaEowrU3UEBrm6Cpj7c1+KBI=\");","map":{"version":3,"sources":["/Users/moriaht/Documents/ez-kanban/src/hooks/useLocalStorage.js"],"names":["useState","useEffect","useLocalStorage","storageKey","defaultValue","state","setState","hasCheckedStorage","setCheckedStorage","storedItem","localStorage","getItem","changeState","value","removeItem","setItem"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,eAAT,CAAyBC,UAAzB,EAAqCC,YAArC,EAAmD;AAAA;;AAChE,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAhC;AACA,MAAI,CAACO,iBAAD,EAAoBC,iBAApB,IAAyCR,QAAQ,CAAC,KAAD,CAArD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqBR,UAArB,CAAjB;AACAG,IAAAA,QAAQ,CAACG,UAAU,IAAIL,YAAf,CAAR;AACAI,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,GAJQ,EAIN,CAACL,UAAD,CAJM,CAAT;;AAMA,WAASS,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBH,MAAAA,YAAY,CAACI,UAAb,CAAwBX,UAAxB;AACD,KAFD,MAEO;AACLO,MAAAA,YAAY,CAACK,OAAb,CAAqBZ,UAArB,EAAiCU,KAAjC;AACD;;AACDP,IAAAA,QAAQ,CAACO,KAAD,CAAR;AACD;;AAED,SAAO,CAACR,KAAD,EAAQO,WAAR,EAAqBL,iBAArB,CAAP;AACD;;GApBuBL,e","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport default function useLocalStorage(storageKey, defaultValue) {\n  let [state, setState] = useState(\"\");\n  let [hasCheckedStorage, setCheckedStorage] = useState(false);\n\n  useEffect(() => {\n    let storedItem = localStorage.getItem(storageKey);\n    setState(storedItem || defaultValue);\n    setCheckedStorage(true);\n  }, [storageKey]);\n\n  function changeState(value) {\n    if (value === null) {\n      localStorage.removeItem(storageKey);\n    } else {\n      localStorage.setItem(storageKey, value);\n    }\n    setState(value);\n  }\n\n  return [state, changeState, hasCheckedStorage];\n}"]},"metadata":{},"sourceType":"module"}